{{/*
Get running environment
*/}}
{{- $environment:= "" }}
{{- $cluster_enable:= "" }}
{{- $master_node0:= "" }}
{{- $master_node1:= "" }}
{{- if .Values.global }}
{{- $environment = .Values.global.environment }}
{{- $cluster_enable = .Values.global.cluster_enable | toString }}
{{- $master_node0 = .Values.global.master_node0 }}
{{- $master_node1 = .Values.global.master_node1 }}
{{- else }}
{{- $environment = .Values.local.environment }}
{{- $cluster_enable:= "false" }}
{{- $master_node0:= "" }}
{{- $master_node1:= "" }}
{{- end }}

{{- $deploytype:= include "getDeployType" . | default "" }}

{{- if eq $deploytype "d8" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gaussdb
  namespace: dpa
spec:
  selector:
    matchLabels:
      app: gaussdb
  serviceName: gaussdb
  replicas:
  {{- if eq $cluster_enable "true" }}
    2
  {{- else }}
    1
  {{- end }}
  template:
    metadata:
      labels:
        app: gaussdb
    {{- if eq $cluster_enable "true" }}
      annotations:
        tag: cluster
    {{- end }}
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 2
              preference:
                matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - {{ $master_node1 }}
            - weight: 1
              preference:
                matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - {{ $master_node0 }}
      serviceAccountName: gaussdb-sa
      terminationGracePeriodSeconds: 0
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        fsGroup: 99
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: gaussdb
          image: gaussdb:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1000
            readOnlyRootFilesystem: true
            capabilities:
              add: ["SYS_ADMIN", "NET_RAW", "NET_ADMIN", "NET_BROADCAST"]
              drop: ["SETFCAP", "KILL", "MKNOD"]
          envFrom:
            - configMapRef:
                name: inf-common-conf
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: DEPLOY_TYPE
              value: {{ $deploytype }}
            {{- if eq $cluster_enable "true" }}
            - name: CLUSTER
              value: "TRUE"
            {{- end }}
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          readinessProbe:
            exec:
              command:
              - sh
              - check_gaussdb_readiness.sh
            initialDelaySeconds: 10
            periodSeconds: 2
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
              - sh
              - check_health.sh
            initialDelaySeconds: 40
            periodSeconds: 25
            failureThreshold: 3
            timeoutSeconds: 10
          ports:
            - containerPort: {{ .Values.GaussDBImagePort }}
              name: gaussdb
          volumeMounts:
            - name: log-path
              mountPath: /opt/OceanProtect
            - mountPath: /tmp
              name: gauss-tmp
            - mountPath: /kmc_conf
              name: kmc-conf
              readOnly: true
            - name: data-nas
              mountPath: /opt/third_data
            - mountPath: /opt/multicluster-conf
              name: multicluster-conf
            {{- if eq $environment "Dorado" }}
            - mountPath: /opt/db_data
              name: db-block
            {{- else }}
            - mountPath: /opt/db_data
              name: db-volume
            {{- end }}
            - name: date-config
              mountPath: /etc/localtime
              readOnly: true
          resources:
            requests:
              memory: "4G"
              cpu: "4"
            limits:
              memory: "8G"
              cpu: "6"
      initContainers:
        - name: infrastructure-cert-init
          image: om:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - |
              chmod g+w /opt/OceanProtect
              chown 0:1000 /tmp
              chmod 1770 /tmp
              sh /opt/om/package/cert/script/init_infra_cert.sh;
              chown 1000:1000 /opt/db_data;
              chmod 700 /opt/db_data;
              iptables -A OUTPUT -p tcp --dport 6432 -m owner --uid-owner 61100 -j ACCEPT;
              iptables -A OUTPUT -p all -m owner --uid-owner 61100 -j DROP;
          securityContext:
            capabilities:
              add: ["NET_ADMIN"]
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: ENVIRONMENT
              value: {{ $environment }}
          volumeMounts:
            - name: log-path
              mountPath: /opt/OceanProtect
            - mountPath: /tmp
              name: gauss-tmp
            - mountPath: /kmc_conf
              name: kmc-conf
              readOnly: true
            - mountPath: /opt/db_data
              name: db-block
      volumes:
        - name: gauss-tmp
          emptyDir: {}
        - name: date-config
          hostPath:
            path: /etc/localtime
        - name: kmc-conf
          configMap:
            name: kmc-store-conf
            defaultMode: 0640
        - name: multicluster-conf
          configMap:
            name: multicluster-conf
            defaultMode: 0644
        {{- if eq $environment "Dorado" }}
        - name: db-block
          persistentVolumeClaim:
            claimName: "db-block"
        - name: log-path
          persistentVolumeClaim:
            claimName: "comm-nas"
        - name: data-nas
          persistentVolumeClaim:
            claimName: "data-nas"
        {{- else }}
        - name: log-path
          hostPath:
            path: /opt/OceanProtect
        - name: data-nas
          hostPath:
            path: /opt/third_data
        - name: db-volume
          hostPath:
            path: /opt/db_data
        {{- end }}
{{- end }}