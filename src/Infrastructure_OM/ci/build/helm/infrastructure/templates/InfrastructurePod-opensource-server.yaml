{{/*
Get running environment
*/}}
{{- $environment:= "" }}
{{- $cluster_enable:= "" }}
{{- if .Values.global }}
{{- $environment = .Values.global.environment }}
{{- $cluster_enable = .Values.global.cluster_enable | toString }}
{{- else }}
{{- $environment = .Values.local.environment }}
{{- $cluster_enable:= "false" }}
{{- end }}

{{- $deploytype:= include "getDeployType" . | default "" }}

{{- if eq $deploytype "d10" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: infrastructure
  namespace: dpa
spec:
  selector:
    matchLabels:
      app: infrastructure
  serviceName: infrastructure
  replicas:
  {{- if eq $cluster_enable "true" }}
    3
  {{- else }}
    1
  {{- end }}
  template:
    metadata:
      labels:
        app: infrastructure
    {{- if eq $cluster_enable "true" }}
      annotations:
        tag: cluster
    {{- end }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - MASTER
                      - STANDBY
                      - SLAVE
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 3
              preference:
                matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - MASTER
            - weight: 2
              preference:
                matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - STANDBY
            - weight: 1
              preference:
                matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - SLAVE
      serviceAccountName: infra-sa
      terminationGracePeriodSeconds: 0
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 30
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 30
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        fsGroup: 99
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: elasticsearch
          image: elasticsearch:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 99
            readOnlyRootFilesystem: true
            capabilities:
              add: ["SYS_ADMIN", "NET_ADMIN"]
              drop: ["NET_RAW", "SETFCAP", "KILL", "MKNOD"]
          envFrom:
            - configMapRef:
                name: inf-common-conf
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if eq $cluster_enable "true" }}
            - name: CLUSTER
              value: "TRUE"
            {{- end }}
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /opt/script/check_health.sh
            initialDelaySeconds: 90
            periodSeconds: 20
            failureThreshold: 3
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - /opt/script/check_elasticsearch_readiness.sh
            periodSeconds: 2
          ports:
            - containerPort: {{ .Values.elasticsearchImagePort }}
              name: elasticsearch
          volumeMounts:
            - name: common-path
              mountPath: /opt/OceanProtect
            - name: data-nas
              mountPath: /opt/third_data
            - name: date-config
              mountPath: /etc/localtime
              readOnly: true
            - mountPath: /tmp
              name: es-tmp
            - mountPath: /opt/multicluster-conf
              name: multicluster-conf
        - name: zookeeper
          image: zookeeper:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 99
            readOnlyRootFilesystem: true
            capabilities:
              add: ["SYS_ADMIN", "NET_ADMIN"]
              drop: ["NET_RAW", "SETFCAP", "KILL", "MKNOD", "CHOWN"]
          envFrom:
            - configMapRef:
                name: inf-common-conf
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if eq $cluster_enable "true" }}
            - name: CLUSTER
              value: "TRUE"
            {{- end }}
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /opt/script/check_health.sh
            initialDelaySeconds: 60
            periodSeconds: 20
            failureThreshold: 3
            timeoutSeconds: 10
          readinessProbe:
            tcpSocket:
              port: {{ .Values.zookeeperImagePort }}
            periodSeconds: 2
          ports:
            - containerPort: {{ .Values.zookeeperImagePort }}
              name: zookeeper
          volumeMounts:
            - name: common-path
              mountPath: /opt/OceanProtect
            - name: data-nas
              mountPath: /opt/third_data
            - name: date-config
              mountPath: /etc/localtime
              readOnly: true
            - mountPath: /opt/multicluster-conf
              name: multicluster-conf
        - name: kafka
          image: kafka:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 99
            readOnlyRootFilesystem: true
            capabilities:
              add: ["SYS_ADMIN", "NET_ADMIN"]
              drop: ["NET_RAW", "SETFCAP", "KILL", "MKNOD", "CHOWN"]
          envFrom:
            - configMapRef:
                name: inf-common-conf
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if eq $cluster_enable "true" }}
            - name: CLUSTER
              value: "TRUE"
            {{- end }}
          livenessProbe:
            initialDelaySeconds: 600
            periodSeconds: 20
            tcpSocket:
              port: 9092
            timeoutSeconds: 10
            failureThreshold: 3
          ports:
            - containerPort: {{ .Values.kafkaImagePort }}
              name: kafka
          volumeMounts:
            - name: common-path
              mountPath: /opt/OceanProtect
            - name: data-nas
              mountPath: /opt/third_data
            - name: date-config
              mountPath: /etc/localtime
              readOnly: true
            - name: common-secret
              mountPath: "/etc/common-secret"
              readOnly: true
            - mountPath: /kmc_conf
              name: kmc-conf
              readOnly: true
            - mountPath: /tmp
              name: kafka-tmp
            - mountPath: /opt/multicluster-conf
              name: multicluster-conf
        - name: redis
          image: redis:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 99
            readOnlyRootFilesystem: true
            capabilities:
              add: ["SYS_ADMIN", "NET_ADMIN"]
              drop: ["NET_RAW", "SETFCAP", "KILL", "MKNOD"]
          envFrom:
            - configMapRef:
                name: inf-common-conf
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            {{- if eq $cluster_enable "true" }}
            - name: CLUSTER
              value: "TRUE"
            {{- end }}
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /opt/script/check_health.sh
            initialDelaySeconds: 15
            periodSeconds: 20
            failureThreshold: 3
            timeoutSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6369  # 兼容之前的版本升级
            periodSeconds: 2
          ports:
            - containerPort: 6369  # 兼容之前的版本升级
              name: redis
          volumeMounts:
            - name: common-path
              mountPath: /opt/OceanProtect
            - name: data-nas
              mountPath: /opt/third_data
            - name: date-config
              mountPath: /etc/localtime
              readOnly: true
            - name: common-secret
              mountPath: "/etc/common-secret"
              readOnly: true
            - mountPath: /tmp
              name: redis-tmp
            - mountPath: /kmc_conf
              name: kmc-conf
              readOnly: true
            - mountPath: /opt/multicluster-conf
              name: multicluster-conf
        - name: om
          image: om:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: inf-common-conf
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: ENVIRONMENT
              value: {{ $environment }}
            - name: DEPLOY_TYPE
              value: d8
            - name: IMAGE_VERSION
              value: {{ .Values.global.version }}
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            {{- if eq $cluster_enable "true" }}
            - name: CLUSTER
              value: "TRUE"
            {{- end }}
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /opt/om/package/check_health.sh
            initialDelaySeconds: 15
            periodSeconds: 20
            failureThreshold: 3
            timeoutSeconds: 10
          readinessProbe:
            tcpSocket:
              port: {{ .Values.omImagePort }}
            periodSeconds: 2
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 99
            capabilities:
              add: ["NET_RAW", "SYS_ADMIN"]
              drop: ["SETFCAP", "KILL", "MKNOD"]
          volumeMounts:
            - name: date-config
              mountPath: /etc/localtime
              readOnly: true
            - name: ip-config
              mountPath: /etc/sysconfig/network-scripts/ifcfg-eth4
            - name: common-path
              mountPath: /opt/OceanProtect
            - name: data-nas
              mountPath: /opt/third_data
            - name: dee-nas
              mountPath: /opt/dee_data
            - name: pm-nas
              mountPath: /opt/pm_data
            - name: agent-nas
              mountPath: /opt/agent_data
            - name: om-tmp
              mountPath: /tmp
            - mountPath: /kmc_conf
              name: kmc-conf
              readOnly: true
        - name: dmc-nginx
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: DEPLOY_TYPE
            value: d8
          - name: ENVIRONMENT
            value: {{ $environment }}
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: dmc_nginx:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            tcpSocket:
              port: 18091
            initialDelaySeconds: 100
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 20
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 65500
            capabilities:
              add: ["SYS_ADMIN"]
              drop: ["NET_RAW"]
          volumeMounts:
            - mountPath: /cache
              name: cache-volume
            - mountPath: /config
              name: protectengine-e-conf
              readOnly: true
            - mountPath: /etc/localtime
              name: date-config
              readOnly: true
            - mountPath: /opt/logpath
              name: common-path
            - mountPath: /kmc_conf
              name: kmc-conf
              readOnly: true
            - mountPath: /opt/network-conf
              name: network-conf
        - name: dme-dmc
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: ENVIRONMENT
            value: {{ $environment }}
          - name: PGSSLROOTCERT
            value: {{ .Values.pgsslrootcert }}
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: DEPLOY_TYPE
            value: d8
          image: dme_dmc:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - sh /opt/OceanStor/100P/ProtectEngine-E/dme_dmc/script/dmeservice/check_health.sh dme-dmc
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 5
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 15021
            capabilities:
              add:
                - SYS_ADMIN
              drop:
                - NET_RAW
          volumeMounts:
            - mountPath: /kmc_conf
              name: kmc-conf
              readOnly: true
            - mountPath: /cache
              name: cache-volume
            - mountPath: /config
              name: protectengine-e-conf
              readOnly: true
            - mountPath: /etc/localtime
              name: date-config
              readOnly: true
            - mountPath: /opt/logpath
              name: common-path
            - mountPath: /opt/network-conf
              name: network-conf
            - mountPath: /opt/common-conf
              name: common-conf
      initContainers:
        - name: init-gaussdb
          image: om:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          command: [ "/bin/bash","-c","--" ]
          args: [ "sh /opt/script/infra_init_ctnr_gaussdb.sh" ]
          volumeMounts:
            - name: data-nas
              mountPath: /opt/third_data
            - name: pm-nas
              mountPath: /opt/pm_data
            - name: common-path
              mountPath: /opt/OceanProtect
            - name: es-tmp
              mountPath: /es-tmp
            - name: kafka-tmp
              mountPath: /kafka-tmp
            - name: redis-tmp
              mountPath: /redis-tmp
            - name: om-tmp
              mountPath: /om-tmp
            - name: cache-volume
              mountPath: /cache
            - mountPath: /opt/multicluster-conf
              name: multicluster-conf
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: DEPLOY_TYPE
              value: d8
      volumes:
        - name: protectengine-e-conf
          configMap:
            name: protectengine-e-conf
        - name: cache-volume
          emptyDir: {}
        - name: es-tmp
          emptyDir: {}
        - name: redis-tmp
          emptyDir: {}
        - name: om-tmp
          emptyDir: {}
        - name: kafka-tmp
          emptyDir: {}
        - name: date-config
          hostPath:
            path: /etc/localtime
        - name: ip-config
          hostPath:
            path: /etc/sysconfig/network-scripts/ifcfg-eth4
            type: FileOrCreate
        - name: common-secret
          secret:
            secretName: common-secret
        - name: kmc-conf
          configMap:
            name: kmc-store-conf
            defaultMode: 0640
        - name: network-conf
          configMap:
            defaultMode: 416
            name: network-conf
        - name: multicluster-conf
          configMap:
            name: multicluster-conf
            defaultMode: 0644
        - name: common-conf
          configMap:
            name: common-conf
        {{- if eq $environment "Dorado" }}
        - name: data-nas
          persistentVolumeClaim:
            claimName: "data-nas"
        - name: common-path
          persistentVolumeClaim:
            claimName: "comm-nas"
        - name: dee-nas
          persistentVolumeClaim:
            claimName: "dee-nas"
        - name: pm-nas
          persistentVolumeClaim:
            claimName: "pm-nas2"
        - name: agent-nas
          persistentVolumeClaim:
            claimName: "agent-nas"
        - name: infrastructure-init
          configMap:
            name: infrastructure-init-conf
        {{- else }}
        - name: common-path
          hostPath:
            path: /opt/OceanProtect
        - name: data-nas
          hostPath:
            path: /opt/third_data
        - name: dee-nas
          hostPath:
            path: /opt/dee_data
        - name: pm-nas
          hostPath:
            path: /opt/pm_data
        - name: agent-nas
          hostPath:
            path: /opt/agent_data
        {{- end }}
{{- end }}