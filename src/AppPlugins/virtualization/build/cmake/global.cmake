option(LLT "Compile in LLT mode" OFF)
option(ASAN "Compile in ASAN mode" OFF)
option(ASAN "Compile in UBSAN mode" OFF)
option(TSAN "Compile in TSAN mode" OFF)
option(DTFUZZ "Compile in DTFUZZ mode" OFF)

set(NX_OPT "-Wl,-z,noexecstack")
set(SP_OPT "-fstack-protector-strong")
set(RELRO_OPT "-Wl,-z,relro")
set(RPATH_OPT "-Wl,--disable-new-dtags")
set(BIND_NOW_OPT "-Wl,-z,now")
set(PIE_OPT "-pie")
set(FS_OPT "-D_FORTIFY_SOURCE=2 -O2")

add_library(vir_safe_cmplib INTERFACE)
add_library(vir_safe_cmpexec INTERFACE)
MESSAGE("CMAKE:::${CMAKE_SYSTEM_NAME}")
if (CMAKE_SYSTEM_NAME MATCHES "Linux")
    target_compile_options(vir_safe_cmplib INTERFACE ${SP_OPT} ${PIE_OPT} ${FS_OPT} -fPIC -pipe)
else()
    target_compile_options(vir_safe_cmplib INTERFACE ${SP_OPT} ${PIE_OPT} ${FS_OPT} -fPIC -pipe -DWIN32 -D__WINDOWS__)
endif()
target_link_options(vir_safe_cmplib INTERFACE ${RELRO_OPT} ${RPATH_OPT} ${BIND_NOW_OPT} ${NX_OPT})

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    message(STATUS "Build release version")
    target_link_options(vir_safe_cmplib INTERFACE -s)
else()
    target_compile_options(vir_safe_cmplib INTERFACE -g)
    target_link_options(vir_safe_cmplib INTERFACE -g)
endif()

if(LLT)
    target_compile_options(vir_safe_cmplib INTERFACE --coverage)
    target_link_options(vir_safe_cmplib INTERFACE --coverage)
endif()

if(DTFUZZ)
    target_compile_options(vir_safe_cmplib INTERFACE -fsanitize=address -fsanitize=undefined -fsanitize-recover=address,all --coverage -fdump-rtl-expand -fsanitize-coverage=trace-pc -g -O0 -fPIC -fno-omit-frame-pointer)
    target_compile_options(vir_safe_cmpexec INTERFACE -fsanitize=address -fsanitize=undefined -fsanitize-recover=address,all -DENABLE_ASAN --coverage -fdump-rtl-expand -fsanitize-coverage=trace-pc -g -O0 -fPIC -fno-omit-frame-pointer)
    target_link_options(vir_safe_cmplib INTERFACE -lasan -lubsan -static-libasan -static-libubsan -lgcov)
    target_link_options(vir_safe_cmpexec INTERFACE -lasan -lubsan -static-libasan -static-libubsan -lgcov)
endif()

if(ASAN)
    target_compile_options(vir_safe_cmplib INTERFACE -fsanitize=address -fsanitize-recover=address,all)
    target_link_options(vir_safe_cmplib INTERFACE -lasan -static-libasan )
endif()

if(UBSAN)
    target_compile_options(vir_safe_cmplib INTERFACE -fsanitize=undefined -fsanitize-recover=address,all)
    target_link_options(vir_safe_cmplib INTERFACE -lubsan -static-libubsan )
endif()

if(TSAN)
    target_compile_options(vir_safe_cmplib INTERFACE -fsanitize=thread -fno-omit-frame-pointer)
    target_link_options(vir_safe_cmplib INTERFACE -static-libtsan -ltsan)
endif()

add_library(checklib-undefined INTERFACE)
if(NOT (WIN32 OR TSAN OR ASAN))
    target_link_options(checklib-undefined INTERFACE -Wl,--no-undefined)
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
if(LLT)
    message(STATUS "LLT compile, do not skip rpath.")
else()
    set(CMAKE_SKIP_RPATH ON)
    set(CMAKE_SKIP_BUILD_RPATH ON)
    set(CMAKE_SKIP_INSTALL_RPATH ON)
endif()
set(CMAKE_CXX_FLAGS "-Wno-error=deprecated-declarations -Wno-deprecated-declarations ")

