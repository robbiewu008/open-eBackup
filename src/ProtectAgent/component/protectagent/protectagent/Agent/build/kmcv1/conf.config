#for linux secure compile options from stdandard 2018.8
SECURE_CFLAG_FOR_SHARED_LIBRARY  = -fstack-protector-all
SECURE_CFLAG_FOR_SHARED_LIBRARY += -Wl,-z,relro
SECURE_CFLAG_FOR_SHARED_LIBRARY += -Wl,-z,noexecstack
SECURE_CFLAG_FOR_SHARED_LIBRARY += -fPIC
SECURE_CFLAG_FOR_SHARED_LIBRARY_OPTIONAL += -Wl,-z,now
 
#-fvisibility=hidden need modify source code
#SECURE_CFLAG_FOR_SHARED_LIBRARY_OPTIONAL += -fvisibility=hidden
 
#-ftrapv -D_FORTIFY_SOURCE=2 -fstack-check May result in performance degradation after opening
#SECURE_CFLAG_FOR_SHARED_LIBRARY_OPTIONAL += -D_FORTIFY_SOURCE=2 -O2
#SECURE_CFLAG_FOR_SHARED_LIBRARY_OPTIONAL += -ftrapv
#SECURE_CFLAG_FOR_SHARED_LIBRARY_OPTIONAL += -fstack-check
#2018.8 this option is forbidden
#SECURE_CFLAG_FOR_SHARED_LIBRARY_OPTIONAL  += -Wl,--disable-new-dtags
 
SECURE_CFLAG_FOR_SHARED_LIBRARY_OPTIONAL += -s
SECURE_CFLAG_FOR_SHARED_LIBRARY_OPTIONAL +=  -Wformat=2 -Wfloat-equal -Wshadow
# about pie option , We compiled a dynamic library, so we did not use it. ,If you want to compile executable files, please open this option
#SECURE_CFLAG_FOR_EXE = -fPIE -pie
 
 
 
## code standard options
SECUREC_CODE_STANDARD_OPTION = -Wconversion
SECUREC_CODE_STANDARD_OPTION += -Wformat-security
SECUREC_CODE_STANDARD_OPTION += -Wextra
SECUREC_CODE_STANDARD_OPTION += --param ssp-buffer-size=4
#repeat options
#SECUREC_CODE_STANDARD_OPTION += -D_FORTIFY_SOURCE=2
#SECUREC_CODE_STANDARD_OPTION += -Wl,-z,relro,-z,now
#SECUREC_CODE_STANDARD_OPTION += -fstack-protector
#this option just break compile
#SECUREC_CODE_STANDARD_OPTION = -Werror
 
#from product options
PRODUCT_OPTION = -Warray-bounds
PRODUCT_OPTION += -Wpointer-arith
PRODUCT_OPTION += -Wcast-qual
PRODUCT_OPTION += -Wstrict-prototypes
PRODUCT_OPTION += -Wmissing-prototypes
PRODUCT_OPTION += -Wstrict-overflow=1
PRODUCT_OPTION += -Wstrict-aliasing=2
PRODUCT_OPTION += -Wswitch -Wswitch-default
 
CFLAG   = -I ../include -Wall  -s -DNDEBUG -O2 $(SECURE_CFLAG_FOR_SHARED_LIBRARY) $(SECURE_CFLAG_FOR_EXE) $(SECURE_CFLAG_FOR_SHARED_LIBRARY_OPTIONAL) $(SECUREC_CODE_STANDARD_OPTION) $(PRODUCT_OPTION)
 
# Platform details
PLATFORM_LINUX = y
PLATFORM_DOPRA = n
PLATFORM_WINDOWS = n
PLATFORM_VXWORKS = n
PLATFORM_SOL = n
PLATFOMR_ARM = n
 
# Bit
LIB_BIT32 = n
 
# Endian. Set lit or big or keep empty for default
LIB_ENDIAN =
 
# lib type
LIBTYPE_SHARED = n
LIB_DEBUG = n
 
# Aes_GCM algrithm support 
FLAGS_AESGCM_SUPPORT = -DWSEC_AES_GCM_SUPPORT
 
 
#encryption adapter chosen
#IPSI -DWSEC_COMPILE_CAC_IPSI
#OpenSSL -DWSEC_COMPILE_CAC_OPENSSL
ENCRYPT_ADAPTER = -DWSEC_COMPILE_CAC_OPENSSL
 
#----------------------------------------------------------------------------------------------------------
# Compiler and linker options for linux
#----------------------------------------------------------------------------------------------------------
ifeq ($(strip $(PLATFORM_LINUX)), y)
	# Compiler Details
	CC=gcc
	CXX=g++
	AR=ar rc
	NM=nm
	OBJ_DUMP=objdump -d
 
	ifeq ($(strip $(LIB_BIT32)), y)
		FLAGS_FOR_BITS = -m32
		ADDITIONAL_BIT_FLAGS = 
		RELY_LIB_BITS=suse11sp3_x86_32
	else
		FLAGS_FOR_BITS = -m64 
		ADDITIONAL_BIT_FLAGS = -D__LP64__ 
		RELY_LIB_BITS=suse11sp3_x86_64
	endif
 
	ifeq ($(strip $(LIB_DEBUG)), y)
		FLAGS_FOR_LIB_MODE = -g
	else
		FLAGS_FOR_LIB_MODE = -O2
	endif
	
	ifeq ($(strip $(LIB_ENDIAN)), lit)
		FLAGS_FOR_ENDIAN = -DWSEC_CPU_ENDIAN_MODE=2	
	else ifeq ($(strip $(LIB_ENDIAN)), big)
		FLAGS_FOR_ENDIAN = -DWSEC_CPU_ENDIAN_MODE=1
	else
		FLAGS_FOR_ENDIAN = 
	endif
		
	ifeq ($(strip $(LIB_DEBUG)), y)
		COMMON_CFLAGS = -Wall
	else
		COMMON_CFLAGS =
	endif
 
	ifeq ($(strip $(PLATFOMR_ARM)), y)
		CFLAGS = $(CFLAG) $(ADDITIONAL_BIT_FLAGS) $(FLAGS_FOR_LIB_MODE) $(COMMON_CFLAGS) $(FLAGS_FOR_ENDIAN)
	else
		CFLAGS = $(CFLAG) $(FLAGS_FOR_BITS) $(ADDITIONAL_BIT_FLAGS) $(FLAGS_FOR_LIB_MODE) $(COMMON_CFLAGS) $(FLAGS_FOR_ENDIAN)
	endif
 
OPENSSL_VERSION = -DWSEC_USE_OPENSSL_110
# Component specific flags
CFLAGS +=  $(ENCRYPT_ADAPTER) $(OPENSSL_VERSION) $(FLAGS_AESGCM_SUPPORT) -DWSEC_ERR_CODE_BASE=0x0 -DWSEC_COMPILE_MIP_OTHER -DWSEC_WRI_LOG_AUTO_END_WITH_CRLF
 
ifeq ($(strip $(OPENSSL_VERSION)), -DWSEC_USE_OPENSSL_110)
OPENSSLVN=openssl110
else
OPENSSLVN=openssl101
endif
 
#work dir
#WORK_DIR = $(subst /Build,,$(shell pwd))
WORK_DIR = ${AGENT_ROOT}
 
#External depended head file path ,you can change it to your own path 
EXTERNAL_OPENSSLV1_PATH = $(WORK_DIR)/open_src/opensslv1
EXTERNAL_SECUREC_PATH = $(WORK_DIR)/platform/securec
 
# include path 
INCLUDE_PATH =  -I$(EXTERNAL_OPENSSLV1_PATH)/include/   \
                -I$(EXTERNAL_SECUREC_PATH)/include/   \
                -I$(WORK_DIR)/platform/kmcv1/include/   \
                -I$(WORK_DIR)/platform/kmcv1/src/common \
                -I$(WORK_DIR)/platform/kmcv1/src/cac \
                -I$(WORK_DIR)/platform/kmcv1/src/kmc \
                -I$(WORK_DIR)/platform/kmcv1/src/sdp \
                -I$(WORK_DIR)/platform/kmcv1/src/mip \
                -I$(WORK_DIR)/platform/kmcv1/src/mip/linux \
                -I$(WORK_DIR)/platform/kmcv1/src/mip/other \
# library path
ifeq ($(strip $(ENCRYPT_ADAPTER)), -DWSEC_COMPILE_CAC_IPSI)
	LIBRARY_PATH = -L $(WORK_DIR)/External/lib/$(RELY_LIB_BITS)/ipsi \
				   -L $(WORK_DIR)/External/lib/$(RELY_LIB_BITS)/securec
	ifeq ($(strip $(LIBTYPE_SHARED)), y)
		LIBRARY_NAME = $(WORK_DIR)/External/lib/$(RELY_LIB_BITS)/securec/libsecurec.a
		LIBRARY_NAME += $(WORK_DIR)/External/lib/$(RELY_LIB_BITS)/ipsi/libipsi_crypto.a 
	else
		LIBRARY_NAME = 	-lipsi_crypto -lsecurec 
	endif
else
	LIBRARY_PATH = -L $(EXTERNAL_OPENSSLV1_PATH)/.openssl/lib \
				   -L $(WORK_DIR)/platform/kmcv1/lib
	ifeq ($(strip $(LIBTYPE_SHARED)), y)
		LIBRARY_NAME = $(WORK_DIR)/platform/kmcv1/lib/libsecurec.a
		LIBRARY_NAME += $(EXTERNAL_OPENSSLV1_PATH)/.openssl/lib/libcrypto.a
	else
		LIBRARY_NAME = 	-lcrypto -lsecurec
	endif
endif
LIBRARY_NAME += $(FLAGS_FOR_BITS)
#source file path
VPATH = $(WORK_DIR)/platform/kmcv1/src/common:$(WORK_DIR)/platform/kmcv1/src/kmc:$(WORK_DIR)/platform/kmcv1/src/sdp:$(WORK_DIR)/platform/kmcv1/src/cac:$(WORK_DIR)/platform/kmcv1/src/mip:$(WORK_DIR)/platform/kmcv1/src/mip/linux:$(WORK_DIR)/platform/kmcv1/src/mip/other
 
endif