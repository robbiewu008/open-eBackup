--- jsoncpp/include/json/reader.h	2022-04-08 02:19:30.000000000 -0400
+++ jsoncpp_new/include/json/reader.h	2022-04-07 21:21:29.000000000 -0400
@@ -71,11 +71,12 @@
    *                             them back during serialization, \c false to
    *                             discard comments.  This parameter is ignored
    *                             if Features::allowComments_ is \c false.
+   * \param      deepLimit       Recursive call depth limit, if this depth is exceeded, return false
    * \return \c true if the document was successfully parsed, \c false if an
    * error occurred.
    */
   bool parse(const std::string& document, Value& root,
-             bool collectComments = true);
+             bool collectComments = true, const int deepLimit = 50);
 
   /** \brief Read a Value from a <a HREF="http://www.json.org">JSON</a>
    * document.
@@ -90,15 +91,16 @@
    *                             them back during serialization, \c false to
    *                             discard comments.  This parameter is ignored
    *                             if Features::allowComments_ is \c false.
+   * \param      deepLimit       Recursive call depth limit, if this depth is exceeded, return false
    * \return \c true if the document was successfully parsed, \c false if an
    * error occurred.
    */
   bool parse(const char* beginDoc, const char* endDoc, Value& root,
-             bool collectComments = true);
+             bool collectComments = true, const int deepLimit = 50);
 
   /// \brief Parse from input stream.
   /// \see Json::operator>>(std::istream&, Json::Value&).
-  bool parse(IStream& is, Value& root, bool collectComments = true);
+  bool parse(IStream& is, Value& root, bool collectComments = true, const int deepLimit = 50);
 
   /** \brief Returns a user friendly string that list errors in the parsed
    * document.
@@ -197,9 +199,9 @@
   bool readCppStyleComment();
   bool readString();
   void readNumber();
-  bool readValue();
+  bool readValue(int currentDeep = 0, const int deepLimit = 50);
   bool readObject(Token& token);
-  bool readArray(Token& token);
+  bool readArray(Token& token, int currentDeep = 0, const int deepLimit = 50);
   bool decodeNumber(Token& token);
   bool decodeNumber(Token& token, Value& decoded);
   bool decodeString(Token& token);
