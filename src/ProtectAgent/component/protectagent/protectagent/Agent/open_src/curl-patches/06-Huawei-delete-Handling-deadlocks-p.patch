From dcaa96ba4b062b631659bba7072738b5cf4209a9 Mon Sep 17 00:00:00 2001
From: <niujiaming@huawei.com>
Date: Fri, 26 Mar 2021 17:15:10 +0800
Subject: [PATCH] [Huawei]delete Handling deadlocks
---
 lib/multi.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/lib/multi.c b/lib/multi.c
index f613263..778c537 100644
--- a/lib/multi.c
+++ b/lib/multi.c
@@ -593,12 +593,14 @@ static CURLcode multi_done(struct Curl_easy *data,
 
   process_pending_handles(data->multi); /* connection / multiplex */
 
+  CONNCACHE_LOCK(data);
   Curl_detach_connnection(data);
   if(CONN_INUSE(conn)) {
     /* Stop if still used. */
     /* conn->data must not remain pointing to this transfer since it is going
        away! Find another to own it! */
     conn->data = conn->easyq.head->ptr;
+    CONNCACHE_UNLOCK(data);
     DEBUGF(infof(data, "Connection still in use %zu, "
                  "no more multi_done now!\n",
                  conn->easyq.size));
@@ -650,6 +652,7 @@ static CURLcode multi_done(struct Curl_easy *data,
     CURLcode res2;
     connclose(conn, "disconnecting");
     Curl_conncache_remove_conn(data, conn, FALSE);
+    CONNCACHE_UNLOCK(data);
     res2 = Curl_disconnect(data, conn, premature);
 
     /* If we had an error already, make sure we return that one. But
@@ -672,6 +675,7 @@ static CURLcode multi_done(struct Curl_easy *data,
               "Connection #%ld to host %s left intact",
               conn->connection_id, host);
     /* the connection is no longer in use by this transfer */
+    CONNCACHE_UNLOCK(data);
     if(Curl_conncache_return_conn(data, conn)) {
       /* remember the most recently used connection */
       data->state.lastconnect_id = conn->connection_id;
-- 
2.1.4

