syntax = "proto2";


/* BEGIN: Added by zhenming 254911, 2015/3/9   PN:for support openStack solution */
enum virtualGroupType
{
    vGeneral   = 0;
    vOpenStack = 1;  //support openStack management
    vFusionManager = 2;
    vVDI = 3;
    vNativeLUN = 4; //LUN
    vNativeCG = 5;  //Consistency Group
    UnknownVirtualGroupType = 255;
}
/* END:   Added by zhenming 254911, 2015/3/9 */

// protected environment type (VMware/FusionSphere/HyperV/Physical
enum EnvironmentType
{
    VMware = 1;
    FusionSphere = 2;
    HyperV = 3;
    OpenStack = 4;
    Physical = 5;
    Physical_AIX = 6;
    Physical_Solaris = 7;
    Physical_HPUX = 8;
    Physical_Linux = 9;
    Physical_RedHat = 10;
    Physical_Suse = 11;
    Physical_Windows = 12;
    FusionSpherePlatForm = 13;
    V3PlatForm = 14;
    NormalAgent = 15;
    NormalAgentCluster = 16;
    AgentForVMWare = 17;
    UnknownEnvironment = 255;
}

//protected environment object type(vCenter,ESX,VRM and so on)
enum EnvObjType
{
	VMware_vCenter = 1;
	FusionSphere_VRM = 4;
	FusionSphere_CNA = 5;
	FusionSphere_Cluster = 6;
	Common_VM = 7;
	VMware_Folder = 8;
	VMware_DataCenter = 9;
	VMware_VirtualApp = 10;		//vApp
	VMware_ResourcePool = 11;
	VMware_ComputeResource = 12; //ESX that is not part of a Cluster
	VMware_ClusterComputeResource = 13; //VMware Cluster
	VMware_HostSystem = 14; // ESX which is under a Cluster
	Template_VM = 15;
	Common_DISK = 16;
	Virtual_Hypervisor = 19;
	Virtual_Compute_Resource = 20;
	Virtual_Storage_Resource = 21;
	V3_STORAGE_POOL = 22;
	V3_STORAGE_LUN = 23;
	V3_STORAGE = 24;
	Common_LUN = 25;
	Common_LUN_Cluster = 26;
    DPA_DATABASE_HOST = 27;
    DPA_DATABASE = 28;
	//others may be added here
    VMware_ClusterResourcePool = 29; // resource pool in under a Cluster 

	EnvObjType_Invalid = 1000;
}

enum EnvMachineDiskType
{
	Common_IDE = 1;
	Common_SCSI = 2;
	VMware_RDM = 3;
	//others may be added here
	Common_SATA = 4;
	Common_VIRTIO = 5;
	EnvMachineDiskType_Invalid=1000;
}

// enum defined by Admin Subsystem and uniquely defines back-end type (deduped, filesystem, compressed, etc..).
// it's consistent, means once ChainEngine was created with specific BackEnd type it will be always opened using the same type.
// otherwise OpenChain will fail.
enum BackendType
{
    FileSpace = 0;
    DeDupe = 1;
    FileSpaceCompressed = 2;
    DeDupeCompressed = 3;
    DistributeDeDupe = 4;
    DistributeDeDupeCompressed=6;
    RawLun=10;
}

// enum that defines backup type (Full/Incremental/others ??)
enum SnapType
{
	Incremental = 1;
	Full = 2;
}
enum DpaBackupLevel
{
    DPAFull = 0;
    DifferIncremental = 1;
    ForeverIncremental = 2;
}



// enum that defines verifysnap model (Full/quick)
enum VerifySnapMode
{
	VerifySnap_Full = 0;
	VerifySnap_Quick = 1;
}

// enum that defines the service protocol of the hyperviosr (http/https)
enum ProtocolType
{
	kHttps = 0;
	kHttp = 1;
}

/*Begin:support HWS openstack backup add by twx279791 20150507*/     
enum Backup_Mode
{
	Incremental_Mode = 1;
	Full_Mode = 2;
}
/* End:support HWS openstack backup */
/*Begin:support HWS openstack restore add by twx279791 20150511*/     
enum Storage_Type
{
	vVRMFusionStorage = 0;
	vKVMFusionStorage = 1;
	vVRMVIMS = 2;
	vKVMV3= 3;
	vVRMV3 = 4;
	vVRMV3RDM= 5;
	vVRMFusionStorageRDM = 6;
	vNativeDoradoV3 = 7;
	vUnknow = 9999999;
}
/* End:support HWS openstack restore */

/*Begin:support HWS openstack restore add by twx279791 20150511*/     
enum Is_Use_Incremental
{
	vFullRestore = 0;
	vResidual = 1;	
	vCloneFull = 2;
}
/* End:support HWS openstack restore */

// a class that contains IP, username, password and EnvironmentType
message EnvironmentPath
{
    repeated EnvironmentType env_type = 1;
    repeated string hv_address = 2;
    repeated string username = 3;
    repeated string password = 4;
    repeated string cert     = 5;
    repeated uint64 port     = 6;
    repeated ProtocolType protocol = 7;
    repeated string hypervisorGUID = 8;
    repeated string mgmtip = 9; //v3 mgmt V4 IPs
    repeated bool v3fullscan_enable = 10; // indicate if doing a full scan in v3 scenario, if false just scan v3 mgmt V4 IPs
    required string crl     = 11;
}

// a class with GUID, unique ID of namespace. 
// defines name of folder in repository, generated by AdminNode
message NamespaceID
{
    repeated string GUID = 1;
    repeated string path = 2;
    repeated string domainUUID = 3;
    repeated string dedupedguid = 4;
}

// a class with GUID, unique ID of domain.
// defines name of folder in repository, generated by AdminNode
message DomainID
{
    repeated string GUID = 1;
}

// a class generated by Environment Proxy during scan operation (and stored in AdminDB). 
// it should contain a minimal amount information that is needed to uniquely locate this machine inside of protected environment. 
// it may be just a GUID or can contain more parameters. Admin Subsystem and Chain Subsystem are not aware of contents of this class,
// it's kind of a "black box" for them, it's transferred as-is from appropriate AdminDB table directly to Proxy Environment Subsystem
message MachinePath
{
	repeated string GUID = 1;
    repeated string MO_Ref = 2;
	repeated string Name = 3; // add VM name for sending alarm or event
	repeated string instance_id = 4;// only when machine restore, the value will be set
}

// a class of two fields: EnvironmentType and unique identifier generated by protected environment (e.g. VM GUID)
message MachineID
{
    repeated string GUID = 1;
    repeated EnvironmentType env_type = 2;
}

// class with three fields: NamespaceID, DomainID and MachineID



enum BrickStatus
{
    BrickConnectedAndAccessible = 1;
    BrickConnectedAndNotAccessible = 2;
    BrickDisconnected = 3;
    BrickConnectedAndFull = 4;
    BrickConnectedAndReadOnly = 5;
}

// command data:
enum BrickType
{
    BrickTypeCIFS = 1;
    BrickTypeNFS = 2;
    BrickTypeVIMS = 6;  //inorder to keep consistent with definition in our document, CIFS:1 NFS:2 AFS:3 GPFS:4 NCP:5.
    BrickTypeS3  = 7;   //support HWS openstack backup add by wenzhibin 20150420
    BrickTypeXFS = 10;  //support local disk with xfs format
    BrickTypeFusionStorage = 12;
}

enum BrickProtocol
{
    BrickProtocolHttps = 0;
	BrickProtocolHttp = 1;
}

message HttpProxy
{
    repeated bool enable = 1;
    repeated string hostname = 2;
    repeated string port = 3;
    repeated string username = 4;
	repeated string userpassword = 5;
	repeated string type = 6;	
}

message SpeedUp
{
	repeated bool enable = 1;
    repeated string method = 2;
}

message BrickData
{
    repeated string path = 1;
    repeated string fs_path = 2;
    repeated BrickStatus expectedStatus= 3;
    repeated BrickType type = 4;
    repeated string username = 5;
    repeated string passwd = 6;
    repeated bool is_recover = 7;
    repeated BrickProtocol protocol = 8; //https:0, http:1
    repeated uint64 brickID = 9;
    /* BEGIN: Added by yulei, 2016/05/14   PN: for support CERT module */
    repeated string cert = 10; //cert's content
    /* END:   Added by yulei, 2016/05/14 */
    /* BEGIN: Added by chenfeiyu, 2017/10/13. PN: for multi-buckets*/
    optional bool multi_bucket = 11[default = false];
    /* END: Added by chenfeiyu, 2017/10/13. PN: for multi-buckets*/
    /*added by lina,2018/08/20 PN:for http proxy */
     repeated HttpProxy httpproxy = 12;
	repeated SpeedUp wanacce = 13;  
    optional string unregNodes = 14;
	optional string current_node =15;
	optional string outgoing_passwd=16;
	optional bool need_format= 17[default = false];
}

message ChainID
{
    repeated NamespaceID namespace_id = 1;
    repeated DomainID domain_id = 2;
    repeated MachineID machine_id = 3;
    repeated BrickData brick_data = 4;//newed added for S3
    optional BackendType backend_type = 5;
    repeated string volume_guid = 6;  //for support namespaceid/domainid/Machineid/volumid
}

// represents the map information of v3
message V3MapInfo
{
    repeated string v3_sn = 1;
    repeated string hostgroup_id = 2;
    repeated string hostgroup_name = 3;
    repeated string host_id = 4;
    repeated string host_name = 5;
    repeated string lungroup_id = 6;
    repeated string lungroup_name = 7;
    repeated string mapview_id = 8;
    repeated string mapview_name = 9;
}

message Buckets
{
    repeated string Path = 1;
    repeated int32 ObjectCount = 2;
    repeated uint64 Status = 3;
}

/* BEGIN: Added by yulei, 2016/05/14   PN: for support CERT module */
message VerifiedCertInfo
{    
    repeated string cert_fingerprint = 1;  //cert's fingerprint
    repeated uint64 cert_type = 2;  //cert's type
	repeated string s3_path = 3;	//for s3 storage
    repeated string env_ip = 4;     //for protected environment
}
/* END:   Added by yulei, 2016/05/14 */

/*BEGIN: Added by hebo/hwx344953, 2018/5/16  PN:for remote replication*/
message Cipher
{
    repeated string cmk_id = 1;
	repeated string vk = 2;
	repeated bool enc_dek = 3;
	repeated string dek =4;
}

message ChainInfoProto
{
    repeated uint64 layout = 1;
	repeated BrickType storage_type = 2;
	repeated string backup_storage = 3;
	repeated BrickData  s3_info = 4;
	repeated Cipher cipher = 5;
	repeated BrickProtocol protocol  = 6;
}

message EbkAuthorizationProto
{
    repeated string server_ip = 1;
	repeated uint64 port = 2;
	repeated string login_user = 3;
	repeated string login_pwd = 4;
	repeated string project_id = 5;
	repeated string domain_id = 6;
	repeated string certs = 7;
}

message ReplicationInfo
{
    repeated string source_snap_id = 1;
	repeated ChainInfoProto source_info = 2;
	repeated ChainInfoProto target_info = 3;
	repeated bool do_crc = 4;
	repeated EbkAuthorizationProto ebk_auth_info = 5;
	repeated string source_region_id = 6;
	repeated bool acc_option = 7;
	repeated uint64 QoS = 8;
	repeated string source_volume_id = 9;
	repeated uint64 tenant_isolation = 10;
}

enum AccOption
{
    NotSpeedUp = 0;
	NeedSpeedUp = 1;
}
/*END:   Added by hebo/hwx344953, 2018/5/16*/
