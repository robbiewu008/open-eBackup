{{/*
   Get running environment instand of using values.yaml
  */}}
  {{- $environment:= "" }}
  {{- if .Values.global }}
  {{- $environment = .Values.global.environment }}
  {{- else }}
  {{- $environment = .Values.local.environment }}
  {{- end }}

  {{- $storageip:= "" }}
  {{- if eq $environment "Dorado" }}
  {{- $storageip = "127.0.0.1" }}
  {{- else }}
  {{- $storageip = .Values.global.storageip }}
  {{- end }}

  {{- $storageuser:= "" }}
  {{- if .Values.global }}
  {{- $storageuser = .Values.global.storageuser }}
  {{- else }}
  {{- $storageuser = "admin"}}
  {{- end }}

  {{- $storagepwd:= "" }}
  {{- if .Values.global }}
  {{- $storagepwd = .Values.global.storagepwd }}
  {{- else }}
  {{- $storagepwd = ""}}
  {{- end }}

  {{- $hostIp:= "" }}
  {{- if .Values.global }}
  {{- $hostIp = .Values.global.hostIp }}
  {{- else }}
  {{- $hostIp = "0.0.0.0"}}
  {{- end }}

  {{- $realreplicas:= "" }}
  {{- if .Values.global }}
  {{- $realreplicas = .Values.global.replicas }}
  {{- else }}
  {{- $realreplicas = .Values.local.replicas }}
  {{- end }}

{{- $deploytype:= include "getDeployType" . | default "" }}
{{- if eq $deploytype "d10" }}
kind: StatefulSet
apiVersion: apps/v1
metadata:
  labels:
    app: protectmanager-biz-service
  name: protectmanager-biz-service
  namespace: dpa
spec:
  replicas: {{$realreplicas}}
  podManagementPolicy: "Parallel"
  serviceName: protectmanager-biz-service
  selector:
    matchLabels:
      app: protectmanager-biz-service
  template:
    metadata:
      labels:
        app: protectmanager-biz-service
      annotations:
        co.elastic.logs/processors.decode_json_fields.fields.1: message
        co.elastic.logs/processors.decode_json_fields.target: ""
        co.elastic.logs/processors.decode_json_fields.overwrite_keys: "true"
    spec:
      automountServiceAccountToken: false
      serviceAccount: ""
      serviceAccountName: ""
      {{- if eq $environment "Dorado" }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      dnsConfig:
        options:
          - name: single-request-reopen
          - name: attempts
            value: '5'
      {{- end }}
      terminationGracePeriodSeconds: 0
      securityContext:
        fsGroup: 99
        {{- if eq $environment "Dorado" }}
        seccompProfile:
          type: RuntimeDefault
        {{- end }}
      initContainers:
        - name: pm-post-upgrade
          image: pm-database-version-migration:{{ .Values.global.version }}
          command: [ "/bin/sh", "-c", "chown 15013:nobody '/tmp' && chmod 750 '/tmp' && if [ ! -d '/opt/OceanProtect/logs/${NODE_NAME}/protectmanager' ];then mkdir -p /opt/OceanProtect/logs/${NODE_NAME}/protectmanager;fi && chown 99:99 /opt/OceanProtect/logs/${NODE_NAME} && chmod 750 /opt/OceanProtect/logs/${NODE_NAME} && chown 99:99 /opt/OceanProtect/logs/${NODE_NAME}/protectmanager && chmod 750 /opt/OceanProtect/logs/${NODE_NAME}/protectmanager && if [ ! -d '/opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_Nginx' ];then mkdir -p /opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_Nginx;fi && chown 65500:99 /opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_Nginx && chmod 750 /opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_Nginx && if [ ! -d '/opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_GUI' ];then mkdir -p /opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_GUI;fi && chown 15012:99 /opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_GUI && chmod 750 /opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_GUI && if [ ! -d '/opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_Data_Protection_Service' ];then mkdir -p /opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_Data_Protection_Service;fi && chown 15013:99 /opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_Data_Protection_Service && chmod 750 /opt/OceanProtect/logs/${NODE_NAME}/protectmanager/PM_Data_Protection_Service && su nobody -s /bin/bash -c 'cd /context/src/ && python3 -m app post_upgrade' && find /opt/ProtectManager/ -type d | grep -v smart_balance | grep -v deploy-gui | xargs chown 99:99 && find /opt/ProtectManager/ -type f | grep -v smart_balance | grep -v deploy-gui | xargs chown 99:99 && chmod 770 /opt/ProtectManager && chown 99:99 /opt/OceanProtect/logs/*/protectmanager && if [ -d '/opt/ProtectManagerNas' ];then chown 99:99 /opt/ProtectManagerNas;fi && if [ ! -d '/opt/OceanProtect/protectmanager/sysbackup/uploadtmp' ];then mkdir -p /opt/OceanProtect/protectmanager/sysbackup/uploadtmp;chown 99:99 /opt/OceanProtect/protectmanager;chown 99:99 /opt/OceanProtect/protectmanager/sysbackup;chmod 750 /opt/OceanProtect/protectmanager;chmod 750 /opt/OceanProtect/protectmanager/sysbackup;chown 15012:99 /opt/OceanProtect/protectmanager/sysbackup/uploadtmp;chmod 750 /opt/OceanProtect/protectmanager/sysbackup/uploadtmp;fi"]
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SERVICE_MODE
              value: product
            - name: LOGLEVEL
              value: DEBUG
            - name: GAUSS_DB_SERVER
              value: "gaussdb:6432"
            - name: POSTGRES_PORT
              value: "6432"
            - name: POSTGRES_SERVER
              value: "infrastructure"
          volumeMounts:
            - mountPath: /tmp/
              name: pm-data-tmp
            - mountPath: /opt/OceanProtect/
              name: nas-path
            - mountPath: /opt/ProtectManager/
              name: pm-path
            - mountPath: /opt/ProtectManagerNas/
              name: pm-path2
            - mountPath: /opt/config
              name: common-volume
              readOnly: true
            - mountPath: /kmc_conf
              name: kmc-conf
              readOnly: true
      containers:
        - name: pm-gui
          image: pm-gui:{{ .Values.global.version }}
          imagePullPolicy: IfNotPresent
          readinessProbe:
            exec:
              command:
                - sh
                - check_health.sh
            periodSeconds: 35
            timeoutSeconds: 30
            failureThreshold: 10
          livenessProbe:
            exec:
              command:
                - sh
                - check_health.sh
            initialDelaySeconds: 600
            periodSeconds: 35
            timeoutSeconds: 30
          command: [ "/bin/sh", "-c", "cd /app/gui;sh app.sh" ]
          securityContext:
            {{- if eq $environment "Dorado" }}
            seccompProfile:
              type: RuntimeDefault
            {{- end }}
            readOnlyRootFilesystem: true
            runAsUser: 15012
            capabilities:
              add:
                - SYS_ADMIN
              drop: [ "NET_RAW", "SETFCAP", "KILL", "MKNOD" ]
          ports:
            - containerPort: 30080
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SERVICE_MODE
              value: product
            - name: server.port
              value: "30080"
            - name: server.address
              value: {{$hostIp}}
            - name: DEPLOY_TYPE
              value: d10
          volumeMounts:
            - mountPath: /tmp/
              name: pm-gui-tmp
            - mountPath: /opt/OceanStor-100P
              name: pm-gui-oceanstor-100p
            - mountPath: /opt/OceanProtect/
              name: nas-path
            - mountPath: /opt/ProtectManager/
              name: pm-path
            - mountPath: /opt/config
              name: common-volume
              readOnly: true
            - mountPath: /OSM/conf
              name: error-code-dir
              readOnly: true
            - mountPath: /whitebox
              name: whitebox-path
          {{- if eq $environment "Dorado" }}
          resources:
            requests:
              memory: "1.5Gi"
              cpu: "0.1"
            limits:
              memory: "1.5Gi"
              cpu: "0.5"
          {{- end }}
        - name: pm-protection-service
          image: pm-protection-service:{{ .Values.global.version }}
          readinessProbe:
            exec:
              command:
                - sh
                - check_health.sh
            periodSeconds: 35
            timeoutSeconds: 30
            failureThreshold: 10
          livenessProbe:
            exec:
              command:
                - sh
                - check_health.sh
            initialDelaySeconds: 200
            periodSeconds: 35
            timeoutSeconds: 30
          securityContext:
            {{- if eq $environment "Dorado" }}
            seccompProfile:
              type: RuntimeDefault
            {{- end }}
            readOnlyRootFilesystem: true
            runAsUser: 15013
            capabilities:
              add:
                - SYS_ADMIN
              drop: [ "NET_RAW", "CHOWN", "SETFCAP", "KILL", "MKNOD" ]
          ports:
            - containerPort: 30092
              name: pm-pro-port
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SERVICE_MODE
              value: product
            - name: LOGLEVEL
              value: DEBUG
            - name: GAUSS_DB_SERVER
              value: "gaussdb:6432"
            - name: REDIS_SENTINEL_HOST
              value: "infrastructure"
            - name: REDIS_SENTINEL_PORT
              value: "6369"
            - name: SCHEDULER_MISFIRE_GRACE_SEC
              value: "300"
            - name: SERVICE_HOST
              value: {{$hostIp}}
            - name: SERVICE_PORT
              value: "30092"
            - name: DEPLOY_TYPE
              value: d8
          volumeMounts:
            - mountPath: /tmp/
              name: pm-data-tmp
            - mountPath: /opt/OceanProtect/
              name: nas-path
            - mountPath: /opt/ProtectManager/
              name: pm-path
            - mountPath: /etc/localtime
              name: date-config-localtime
            - mountPath: /opt/config
              name: common-volume
              readOnly: true
            - mountPath: /kmc_conf
              name: kmc-conf
              readOnly: true
          envFrom:
            - configMapRef:
                name: protect-manager-conf
          {{- if eq $environment "Dorado" }}
          resources:
            requests:
              memory: "800Mi"
              cpu: "0.7"
            limits:
              memory: "800Mi"
              cpu: "0.7"
          {{- end }}
      volumes:
        - name: pm-gui-oceanstor-100p
          emptyDir: {}
        - name: pm-gui-tmp
          emptyDir: {}
        - name: pm-data-tmp
          emptyDir: {}
        - name: error-code-dir
          hostPath:
            path: /OSM/conf/
        - name: kmc-conf
          configMap:
            name: kmc-store-conf
            defaultMode: 0640
        {{- if eq $environment "Dorado" }}
        - name: nas-path
          persistentVolumeClaim:
            claimName: "comm-nas"
        - name: pm-path
          persistentVolumeClaim:
            claimName: "pm-nas2"
        - name: pm-path2
          persistentVolumeClaim:
            claimName: "pm-nas"
        - name: index-dir
          persistentVolumeClaim:
            claimName: "dee-nas"
        {{- else }}
        - name: nas-path
          hostPath:
            path: /opt/OceanProtect/
        - name: pm-path
          hostPath:
            path: /opt/ProtectManager/
        - name: pm-path2
          hostPath:
            path: /opt/ProtectManagerNas/
        - name: index-dir
          hostPath:
            path: /tmp/share/
        {{- end }}
        - name: date-config-localtime
          hostPath:
            path: /etc/localtime
        - name: common-volume
          configMap:
            name: common-conf
        - name: config-volume
          configMap:
            name: protect-manager-conf
            defaultMode: 0640
        - name: whitebox-path
          hostPath:
            path: /OSM/coffer_data/container_app_data
{{- end }}
